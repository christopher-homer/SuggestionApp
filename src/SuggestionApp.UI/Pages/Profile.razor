@page "/Profile"
@attribute [Authorize]
@using SuggestionApp.UI.Components
@inject AuthenticationStateProvider authProvider
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager;

<h1 class="page-heading text-uppercase mb-4">My Profile</h1>

<div class="row">
    <div class="col-12 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

<div class="form-layout mb-3">
    <h2 class="my-submission-heading">My Account</h2>
    <p class="my-submission-text">
        <a href="/MicrosoftIdentity/Account/EditProfile">
            Edit My Profile
        </a>
    </p>
</div>

<SuggestionList Suggestions="approved" Title="Approved Suggestions" Description="These are your suggestions that are currently active." />
<SuggestionList Suggestions="archived" Title="Archived Suggestions" Description="These are your suggestions that were active but did not gain enough traction." />
<SuggestionList Suggestions="pending" Title="Pending Suggestions" Description="These are your suggestions that have not yet been reviewed by the administrators." />
<SuggestionList Suggestions="rejected" Title="Rejected Suggestions" Description="These are your suggestions that were not deemed to be appropriate for the training suggestion site." />


@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        if (loggedInUser is not null)
        {
            var results = await suggestionData.GetUsersSuggestions(loggedInUser.Id);

            if (results is not null)
            {
                submissions = results.OrderByDescending(s => s.DateCreated).ToList();
                approved = submissions.Where(s => s.ApprovedForRelease && !s.Archived && !s.Rejected).ToList();
                archived = submissions.Where(s => s.Archived && !s.Rejected).ToList();
                pending = submissions.Where(s => !s.ApprovedForRelease && !s.Rejected).ToList();
                rejected = submissions.Where(s => s.Rejected).ToList();
            }
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
